Message structure:
[header][body]

Header structure:
[body size][message type]
Body size and message type is 4 bytes variables (it means that the header size is 8 bytes).
Body size and message type are big endian

Body structure:
Json
(utf8)

Note:
Body should not be empty.
If there is not any data body should contains empty json object ("{}")

Examples:

System type:

[[0x00000031][0x00000001]]
[{"login" : "retard", "password" : "iamnotretard"}]

[[0x00000031][0x00000001]]
[{"url_to_upload_map" : "grief.ly/FFFFFFFFFFFFFFFF", "tick": 42}]

[[0x00000035][0x00000001]]
[{"url_to_download_map" : "grief.ly/FFFFFFFFFFFFFFFF"}]


Ordinary typa (aka keyboard type):
[[0x0000001C][0x00000002]]
[{"id" : 1, "key" : "KEY_UP"}]

[[0x00000020][0x00000002]]
[{"id" : 0, "key" : "CREATE_NEW"}]

Message type:
[[0x00000032][0x00000003]]
[{"id" : 1, "type" : "OOC", "text" : "Hello world"}]

LIST OF TYPES:

DEFINED TYPES:

MESSAGES TO SERVER FROM CLIENT:

1 - INITAL LOGIN MESSAGE
{"login" : "Someone", "password" : "12345", "game_version" : "v0.2.1", "guest" : false}
Size < 512

2 - EXIT_CLIENT
(empty)

3 - HASH MESSAGE
{"hash":42,"tick":42}
Size < 512

4 - RESTART ROUND
(empty)

5 - NEXTTICK
(empty)

MESSAGES TO CLIENT FROM SERVER:

ERROR MESSAGES:

401 - WRONG GAME VERSION
{"correct_game_version" : "v0.2.2"}
Size < 512

402 - WRONG AUTHENTICATION
(empty)

403 - UNDEFINED ERROR
(empty)

404 - EXIT_SERVER
(empty)

405 - MASTER CLIENT IS NOT CONNECTED
(empty)

406 - CLIENT IS OUT OF SYNC
(empty)

407 - CLIENT TOO SLOW
(empty)

408 - INTERNAL SERVER ERROR
{"message": "i'm ill"}

409 - SERVER IS RESTARTING
(empty)

NON ERROR MESSAGES:
201 - SUCCESS CONNECTION
{"map" : "no_map", "your_id" : 42}
Size < 512

202 - MAP UPLOAD
{"url_to_upload_map" : "grief.ly/blah", "tick": 42}
Size < 512

203 - NEW TICK
(empty)

204 - NEW CLIENT
{"id" : 42}
Size < 128

205 - CURRENT CONNECTIONS
{"amount" : 42}
Size < 128

206 - REQUEST HASH
{"tick": 42}

GAME (BROADCASTED) TYPES:

They are used only in client (mostly)
1001 - oridnary/keyboard
{"key":"ENTER"}
Size < 512

1002 - message 
{"text":"some text"}
Size < 2 * 1024

1003 - some complicated gui message (not used currently)

1004 - action over object
{"action":"rclick", "obj":42}
Size < 512

1005 - ooc message
{"login":"login", "text":"some text"}
Size < 2 * 1024

1102 - ping message
{"ping_id":"some_unique_string"}
Size < 512

PROTOCOL:

I. LOGIN STAGE

1. from CLIENT to SERVER:
protocol version, 4 bytes ("S132")

2. from CLIENT to SERVER
type: INITAL LOGIN MESSAGE
{"login" : "Someone", "password" : "12345", "game_version" : "v0.2.1", "guest" : false}

If "guest" is true then server should interpret this login as random not used login
 with empty ("") password, for example "Guest4242". Authentication will be always successful.

3.
(It is better to check game version first always)
b) WRONG GAME VERSION
 from SERVER to CLIENT
type: WRONG GAME VERSION
{"correct_game_version" : "v0.2.2"}
-> connection closed

a) WRONG LOGIN OR PASSWORD 
 from SERVER to CLIENT
type: WRONG AUTHENTICATION
(empty)
-> connection closed

c) MASTER CLIENT DOES NOT EXIST, AND login IS ADMIN
 from SERVER to CLIENT
Server creates new client, gives number to him
type: SUCCESS CONNECTION
{"map" : "no_map", "your_id" : 42}
New client now master client

c2) MASTER CLIENT DOES NOT EXIST, AND login IS NOT ADMIN
type: MASTER CLIENT IS NOT CONNECTED
(empty)
-> connection closed

d) MASTER CLIENT EXISTS AND "login" DOES NOT HAVE ID
Server creates new client, gives number to him

 from SERVER to ALL CLIENTS (EXCEPT NEW CLIENT)
 type: NEW CLIENT
 "id" - new number for new client
{"id" : 42}

 from SERVER to MASTER CLIENT
 type: MAP UPLOAD
{"url_to_upload_map" : "grief.ly/blah", "tick": 42}

 from SERVER to CLIENT
type: SUCCESS CONNECTION
{"map" : "grief.ly/blah", "your_id" : 42}

c) MASTER CLIENT EXISTS AND "login" DOES HAVE ID
Server uses existing client info, takes number from that info

If there is an old alive connection that is associated with login then
server should drop the old connection.

 from SERVER to MASTER CLIENT
 type: MAP UPLOAD
{"url_to_upload_map" : "grief.ly/blah", "tick": 42}

 from SERVER to CLIENT
type: SUCCESS CONNECTION
{"map" : "grief.ly/blah", "your_id" : 24}

d) UNDEFINED ERROR
For example, during the process master client disconnects, or something else

 from SERVER to CLIENT
 type UNDEFINED ERROR
(empty)

////////////////////////////////
END OF LOGIN STAGE

II. ACTIVE CONNECTION STAGE

-------------------
Overall game cycle in the client:
1. Map generation or map downloading
2. Broadcasted messages processing 
(Note: new client message is basically broadcasted message and can be processed here)
3. New tick message processing (the tick counter increment)
4. Processing of system messages which depend from worlds state 
(a request for hash, a request for map upload, etc)
5. Goto 2 

System messages which don't depend from the world state (pings, for example) can be processed and sended in any moment.

So, all special system messages (from p2) should be sended by the server only right after a tick message and before
any broadcasted message. 
-----------------------


No specific order

X - NOT DEFINED TYPE (X may be 1000, 2000 etc)
In other words, if other action is not defined for this type of the message then server should broadcast the message
message type >=1000

1. 

from CLIENT to SERVER
 type: X
{some json}

validate message (length, json structure)
if success:
after that broadcast message

from SERVER to ALL CLIENTS (even inital client):
 type: X
{"id" : 42, some json}

"id" - number of initial client (message sender)

Additionaly,
If message 1005 - ooc message
then server places client login in the "login" json field.

2.

Each T milliseconds (now T is 100, 10 messages per second)

from SERVER to CLIENT
 type: NEW_TICK
(empty)

3. 

from SERVER to CLIENT (server-configured time interval)
type: REQUEST HASH
{"tick":42}

from CLIENT to SERVER
type: HASH MESSAGE
{"hash":42,"tick":42}

Server saves all hash messages. If some client is out of sync (his hash for some tick does not match
the hash for same tick for master client) then the server:

 from SERVER to MASTER CLIENT
 type: MAP UPLOAD
{"url_to_upload_map" : "grief.ly/blah", "tick": 42}

 from SERVER to THE UNSYNC CLIENT
 type: MAP UPLOAD
{"url_to_upload_map" : "grief.ly/blah", "tick": 42}

 from SERVER to THE UNSYNC CLIENT
type: CLIENT IS OUT OF SYNC
(empty)
-> connection closed

Server should keep the data about each unsync incident: the unsync map, the master client map,
all hash messages up to the unsync moment

4.
205 - CURRENT CONNECTIONS

Sometimes the server sends every client the message with current amount of active connections
(the amount of active players on server now)

5.
4 - RESTART ROUND
(empty)

from ADMIN CLIENT to SERVER
if from non ADMIN client then do nothing
if from ADMIN CLIENT:

 from SERVER to ALL CLIENTS:
 409 SERVER IS RESTARTING

restart server (basically, break all connections)  

6.
5 - NEXTTICK

from ADMIN CLIENT to SERVER
if from non ADMIN client then do nothing
if from ADMIN CLIENT:

the server should perform NEW_TICK event (send NEW_TICK to every client even if time has not yet come). 

///////////////
END OF ACTIVE CONNECTION STAGE

III. END CONNECTION STAGE

Client should send message on exit:
from CLIENT to SERVER
type EXIT_CLIENT
(empty)

Server if it closes connection (not WRONG GAME VERSION/etc cases) should send message on exit:
from SERVER to CLIENT
type EXIT_SERVER
(empty)

IF CLIENT CLOSES HIS CONNECTION:

a) It is a regular client

Server should remove this client from the client list.
Note that when any new client will be created server should not reuse numbers for clients.
So we dont send to this client messages anymore, but we still keep information about it (login + number, maybe something
else later (ip?)).

b) It is master client, and there is at least one other client.

Make a) with master client, but make some client (in future here will be some heuristic probably) master client.
If master client happens during a new client connection - we do not care.
The master client disconnection should be really rare case

c) It is master client, and there is no any other clients.

Forget everything. Basically, restart server (well, at least do not keep information about logins + ids)

//////////
END OF END CONNECTION STAGE

HOW CLIENT UPLOADS MAP TO SERVER:
POST request to some url ("grief.ly/blah")
Content-Length as header
Content-Type: application/octet-stream or application/zip
Binary map in the body of the POST request.
Response 200 OK
Other responses - error.

HOW CLIENT DOWNLOADS MAP FROM SERVER
GET request to some url ("grief.ly/blah")
Response 200 OK
Content-Length in the response
Content-Type: <type> - type that was in uploaded map
Body is the binary map
Response 200 OK
Other responses - error.
































